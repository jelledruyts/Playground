# IMPORTANT NOTE: this scenario uses a technique to provision the database user which is
# explicitly undocumented and unsupported. Do not use this approach in production!
# See https://github.com/MicrosoftDocs/sql-docs/issues/2323#issuecomment-719003520

# In this scenario, the workload identity is granted "Application.Read.All" permissions in
# Microsoft Graph so that it can look up the AppID of the web app's managed identity. The
# workload sets itself as the Azure AD administrator of SQL server so that it can execute a
# T-SQL statement to create the database user for the managed identity of a web app. To
# avoid the need for Microsoft Graph permissions or Azure AD directory roles for the managed
# identity of the SQL server, the workload directly inserts the database user by calculating
# the database SID from the managed identity's App ID. As of then, the web app can connect
# to the SQL database using its managed identity, which is mapped to its own specific
# database user.

#################### PREREQUISITES ####################

# The commands below should be executed in bash with the following prerequisites installed
# (note that these are all preinstalled on Azure Cloud Shell):
# - Azure CLI (https://docs.microsoft.com/cli/azure/install-azure-cli)
# - curl
# - jq
# - tr
# - iconv
# - sqlcmd (https://learn.microsoft.com/sql/linux/sql-server-linux-setup-tools?tabs=ubuntu-install%2Credhat-offline#install-tools-on-linux).

#################### ADMINISTRATOR ####################

# Set configuration variables.
TENANT_ID=MSDx413347.onmicrosoft.com
PREFIX=WI-
RESOURCEGROUP_NAME="$PREFIX"ResourceGroup
REGION="westeurope"

# Login interactively.
az login --tenant $TENANT_ID

# Create the Service Principal representing the Workload Identity.
WORKLOAD_SP=$(az ad sp create-for-rbac --name "$PREFIX"WorkloadIdentity)
WORKLOAD_APPID=$(echo $WORKLOAD_SP | jq -r .appId)
WORKLOAD_SP_OBJECTID=$(az ad sp list --filter "appId eq '$WORKLOAD_APPID'" --query "[0].id" -o tsv)
WORKLOAD_SP_PASSWORD=$(echo $WORKLOAD_SP | jq -r .password)
echo "Workload Identity Service Principal created: App ID '$WORKLOAD_APPID', Object ID '$WORKLOAD_SP_OBJECTID'."

# Create a resource group to allow the Workload Identity to deploy into.
RESOURCEGROUP=$(az group create --name $RESOURCEGROUP_NAME --location $REGION)
RESOURCEGROUP_ID=$(echo $RESOURCEGROUP | jq -r .id)

# Add the Workload Identity as a Contributor to the resource group so it can deploy resources.
az role assignment create --assignee-object-id $WORKLOAD_SP_OBJECTID --assignee-principal-type ServicePrincipal --role Contributor --scope $RESOURCEGROUP_ID

# Look up the object ID of the service principal representing the Microsoft Graph API in the current tenant.
GRAPH_APPID=00000003-0000-0000-c000-000000000000
GRAPH_SP_OBJECTID=$(az ad sp list --filter "appId eq '$GRAPH_APPID'" --query "[0].id" -o tsv)

# Grant the Workload Identity the "Application.Read.All" application permission on Microsoft Graph
# so that it can look up the AppID of the web app's managed identity.
# See https://learn.microsoft.com/graph/permissions-reference?view=graph-rest-1.0#all-permissions-and-ids.
# Creating an app role assignment is the same as granting admin consent for that permission.
GRAPH_APPROLEID=9a5d68dd-52b0-4cc2-bd40-abcf44ac3a30
az rest -m POST -u https://graph.microsoft.com/v1.0/servicePrincipals/$WORKLOAD_SP_OBJECTID/appRoleAssignments -b '{
    "principalId": "'$WORKLOAD_SP_OBJECTID'",
    "resourceId": "'$GRAPH_SP_OBJECTID'",
    "appRoleId": "'$GRAPH_APPROLEID'"
}'

# Create a regular security group which will be used as the Azure AD admin group for the SQL server.
SQLADMINGROUP=$(az rest -m POST -u https://graph.microsoft.com/v1.0/groups -b '{
    "displayName": "'$PREFIX'AzureSQLAdmins",
    "mailNickname": "'$PREFIX'azure-sql-admins",
    "mailEnabled": false,
    "securityEnabled": true,
    "visibility": "Private"
}')
SQLADMINGROUP_ID=$(echo $SQLADMINGROUP | jq -r .id)
SQLADMINGROUP_DISPLAYNAME=$(echo $SQLADMINGROUP | jq -r .displayName)

#################### WORKLOAD IDENTITY ####################

# Log in to the Azure CLI as the Workload Identity.
az login --service-principal --username $WORKLOAD_APPID --password $WORKLOAD_SP_PASSWORD --tenant $TENANT_ID

# Create an App Service web app.
WEBPLAN_NAME="$PREFIX"Web-Plan"$RANDOM"
WEBAPP_NAME="$PREFIX"Web-App"$RANDOM"
az appservice plan create --name $WEBPLAN_NAME --resource-group $RESOURCEGROUP_NAME --sku FREE --is-linux
WEBAPP=$(az webapp create --name $WEBAPP_NAME --resource-group $RESOURCEGROUP_NAME --plan $WEBPLAN_NAME --assign-identity --deployment-container-image-name https://ghcr.io/jelledruyts/inspectorgadget --https-only true)
WEBAPP_SP_OBJECTID=$(echo $WEBAPP | jq -r '.identity.principalId')

# Look up the AppId of the web app's managed identity (this requires "Application.Read.All" permissions).
WEBAPP_SP_APPID=$(az ad sp show --id $WEBAPP_SP_OBJECTID --query appId -o tsv)

# Create a SQL server.
SQLSERVER_NAME="$PREFIX"Sql-Server"$RANDOM"
SQLDATABASE_NAME="$PREFIX"Sql-Database"$RANDOM"
SQLDATABASE_CONNECTIONSTRING="Server=tcp:$SQLSERVER_NAME.database.windows.net,1433;Database=$SQLDATABASE_NAME;"

# At first, set the Workload Identity as the SQL AAD admin so that it can provision the database user for the web app.
WORKLOAD_SID=$(az account show --query user.name -o tsv)
SQLSERVER=$(az sql server create --name $SQLSERVER_NAME --resource-group $RESOURCEGROUP_NAME --enable-ad-only-auth --external-admin-principal-type Application --external-admin-name $WORKLOAD_SID --external-admin-sid $WORKLOAD_SID)
SQLSERVER_ID=$(echo $SQLSERVER | jq -r .id)

# Open the SQL Firewall to allow the local IP and any Azure-based IP address to connect to the database.
# NOTE: in production, this should be much more restrictive.
LOCAL_IP=$(curl -s https://api.ipify.org)
az sql server firewall-rule create --name AllowLocalIP --resource-group $RESOURCEGROUP_NAME --server $SQLSERVER_NAME --start-ip-address $LOCAL_IP --end-ip-address $LOCAL_IP
az sql server firewall-rule create --name AllowAllAzureIps --resource-group $RESOURCEGROUP_NAME --server $SQLSERVER_NAME --start-ip-address 0.0.0.0 --end-ip-address 0.0.0.0

# Create the SQL Database.
az sql db create --name $SQLDATABASE_NAME --resource-group $RESOURCEGROUP_NAME --server $SQLSERVER_NAME --tier GeneralPurpose --family Gen5 --capacity 2 --compute-model Serverless --auto-pause-delay 120

# Get an access token for the SQL server on behalf of the Workload Identity.
# See https://learn.microsoft.com/sql/connect/odbc/linux-mac/connecting-with-sqlcmd?view=azuresqldb-current.
az account get-access-token --resource https://database.windows.net | jq -r '.accessToken' | tr -d '\n' | iconv -f ascii -t UTF-16LE > /tmp/token

# Connect to the SQL server using the access token and create a user for the managed identity of the web app.
/opt/mssql-tools/bin/sqlcmd -S $SQLSERVER_NAME.database.windows.net -d $SQLDATABASE_NAME -G -P /tmp/token -Q '
    DECLARE @objectid varchar(100) = "'$WEBAPP_SP_APPID'";
    DECLARE @sid binary(16) = CAST(CAST(@objectid AS uniqueidentifier) AS binary(16));
    DECLARE @sidstr varchar(1000) = "0x" + CONVERT(varchar(1000), @sid, 2);
    DECLARE @sql nvarchar(max) = "CREATE USER ['$WEBAPP_NAME'] WITH type = E, sid = " + @sidstr;
    IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = "'$WEBAPP_NAME'")
    BEGIN
        EXEC sys.sp_executesql @sql;
        ALTER ROLE db_owner ADD MEMBER ['$WEBAPP_NAME'];
    END
'

# After initial configuration, set the SQL AAD admin to a pre-existing group so that external admins can manage the SQL server.
az sql server ad-admin update --ids $SQLSERVER_ID --display-name $SQLADMINGROUP_DISPLAYNAME --object-id $SQLADMINGROUP_ID

# Configure the web app to connect to the database.
az webapp config appsettings set --name $WEBAPP_NAME --resource-group $RESOURCEGROUP_NAME --settings "DefaultSqlConnectionSqlConnectionStringSuffix=$SQLDATABASE_CONNECTIONSTRING" "DefaultSqlConnectionUseAzureManagedIdentity=true" "InfoMessage=Go to the SQL page to connect to the database!"

# Navigate to the web app to test the connection to the database.
az webapp browse --name $WEBAPP_NAME --resource-group $RESOURCEGROUP_NAME

# Alternatively, call the Web API to test the connection to the database directly.
curl -s -X POST -H "Content-Type: application/json" https://$WEBAPP_NAME.azurewebsites.net/api/sqlconnection -d '{
    "databaseType": "SqlServer",
    "sqlConnectionString": "'$SQLDATABASE_CONNECTIONSTRING'",
    "sqlQuery": "SELECT USER_NAME()",
    "useAzureManagedIdentity": true
}'

# Remove the App Service web app.
az webapp delete --name $WEBAPP_NAME --resource-group $RESOURCEGROUP_NAME

# Remove the SQL Database.
az sql server delete --name $SQLSERVER_NAME --resource-group $RESOURCEGROUP_NAME --yes

#################### ADMINISTRATOR ####################

# Since the Workload Identity was logged in to the Azure CLI, login interactively again.
az login --tenant $TENANT_ID

# Remove the security group.
az ad group delete --group $SQLADMINGROUP_ID

# Remove the resource group.
az group delete --name $RESOURCEGROUP_NAME --yes

# Remove the Workload Identity.
az ad app delete --id $WORKLOAD_APPID
