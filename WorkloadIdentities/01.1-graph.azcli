# In this scenario, the workload identity has been given appropriate permissions
# on Microsoft Graph so it can call specific Microsoft Graph APIs.

#################### PREREQUISITES ####################

# The commands below should be executed in bash with the following prerequisites installed
# (note that these are all preinstalled on Azure Cloud Shell):
# - Azure CLI (https://docs.microsoft.com/cli/azure/install-azure-cli)
# - curl
# - jq

#################### ADMINISTRATOR ####################

# Set configuration variables.
TENANT_ID=MSDx413347.onmicrosoft.com
PREFIX=WI-

# Login interactively.
az login --tenant $TENANT_ID

# Create the Service Principal representing the Workload Identity.
WORKLOAD_SP=$(az ad sp create-for-rbac --name "$PREFIX"WorkloadIdentity)
WORKLOAD_APPID=$(echo $WORKLOAD_SP | jq -r .appId)
WORKLOAD_SP_OBJECTID=$(az ad sp list --filter "appId eq '$WORKLOAD_APPID'" --query "[0].id" -o tsv)
WORKLOAD_SP_PASSWORD=$(echo $WORKLOAD_SP | jq -r .password)
echo "Workload Identity Service Principal created: App ID '$WORKLOAD_APPID', Object ID '$WORKLOAD_SP_OBJECTID'."

# Look up the object ID of the service principal representing the Microsoft Graph API in the current tenant.
GRAPH_APPID=00000003-0000-0000-c000-000000000000
GRAPH_SP_OBJECTID=$(az ad sp list --filter "appId eq '$GRAPH_APPID'" --query "[0].id" -o tsv)

# Grant the Workload Identity the "Sites.Read.All" application permission on Microsoft Graph.
# See https://learn.microsoft.com/graph/permissions-reference?view=graph-rest-1.0#all-permissions-and-ids.
# Creating an app role assignment is the same as granting admin consent for that permission.
GRAPH_APPROLEID=332a536c-c7ef-4017-ab91-336970924f0d
az rest -m POST -u https://graph.microsoft.com/v1.0/servicePrincipals/$WORKLOAD_SP_OBJECTID/appRoleAssignments -b '{
    "principalId": "'$WORKLOAD_SP_OBJECTID'",
    "resourceId": "'$GRAPH_SP_OBJECTID'",
    "appRoleId": "'$GRAPH_APPROLEID'"
}'

#################### WORKLOAD IDENTITY ####################

# Use a client credentials flow to acquire a token from Azure AD for the service principal, targeting the Microsoft Graph.
WORKLOAD_AUTH=$(curl -s -X POST -d "grant_type=client_credentials&client_id=$WORKLOAD_APPID&client_secret=$WORKLOAD_SP_PASSWORD&scope=https://graph.microsoft.com/.default" https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/token)
WORKLOAD_TOKEN=$(echo $WORKLOAD_AUTH | jq -r .access_token)

# For debugging purposes, show the app roles contained in the access token as the "roles" claim.
WORKLOAD_TOKEN_PARTS=(${WORKLOAD_TOKEN//./ })
WORKLOAD_TOKEN_APPROLES=$(echo ${WORKLOAD_TOKEN_PARTS[1]} | base64 -d | jq .roles)
echo "Workload Identity app roles: $WORKLOAD_TOKEN_APPROLES"

# Call the Microsoft Graph API using the token and list all sites (using the granted "Sites.Read.All" permission).
curl -s -X GET -H "Authorization: Bearer $WORKLOAD_TOKEN" https://graph.microsoft.com/v1.0/sites

# Alternatively, login as the service principal and call the Graph API using "az rest".
az login --service-principal --username $WORKLOAD_APPID --password $WORKLOAD_SP_PASSWORD --tenant $TENANT_ID --allow-no-subscriptions
az rest -m GET -u https://graph.microsoft.com/v1.0/sites

#################### ADMINISTRATOR ####################

# Since the Workload Identity was logged in to the Azure CLI, login interactively again.
az login --tenant $TENANT_ID

# Remove the Workload Identity.
az ad app delete --id $WORKLOAD_APPID
