# In this scenario, the workload identity is made an owner of a role-assignable group
# in Azure AD which has a directory role assigned. The group ownership allows the workload
# identity to add other service principals as members of that group, thereby granting them
# the directory role (without the workload identity itself having any Azure AD permissions).

#################### PREREQUISITES ####################

# The commands below should be executed in bash with the following prerequisites installed
# (note that these are all preinstalled on Azure Cloud Shell):
# - Azure CLI (https://docs.microsoft.com/cli/azure/install-azure-cli)
# - curl
# - jq

#################### ADMINISTRATOR ####################

# Set configuration variables.
TENANT_ID=MSDx413347.onmicrosoft.com
PREFIX=WI-
RESOURCEGROUP_NAME="$PREFIX"ResourceGroup
REGION="westeurope"

# Login interactively.
az login --tenant $TENANT_ID

# Create the Service Principal representing the Workload Identity.
WORKLOAD_SP=$(az ad sp create-for-rbac --name "$PREFIX"WorkloadIdentity)
WORKLOAD_APPID=$(echo $WORKLOAD_SP | jq -r .appId)
WORKLOAD_SP_OBJECTID=$(az ad sp list --filter "appId eq '$WORKLOAD_APPID'" --query "[0].id" -o tsv)
WORKLOAD_SP_PASSWORD=$(echo $WORKLOAD_SP | jq -r .password)
echo "Workload Identity Service Principal created: App ID '$WORKLOAD_APPID', Object ID '$WORKLOAD_SP_OBJECTID'."

# Create a role-assignable group with the Workload Identity as an Owner of the group.
# See https://learn.microsoft.com/azure/active-directory/roles/groups-create-eligible#microsoft-graph-api.
ROLEASSIGNABLEGROUP=$(az rest -m POST -u https://graph.microsoft.com/v1.0/groups -b '{
    "displayName": "'$PREFIX'DirectoryReaders",
    "mailNickname": "'$PREFIX'directory-readers",
    "isAssignableToRole": true,
    "mailEnabled": false,
    "securityEnabled": true,
    "visibility": "Private",
    "owners@odata.bind": [
        "https://graph.microsoft.com/v1.0/serviceprincipals/'$WORKLOAD_SP_OBJECTID'"
    ]
}')
ROLEASSIGNABLEGROUP_ID=$(echo $ROLEASSIGNABLEGROUP | jq -r .id)

# Assign the "Directory Readers" role to the group.
# See https://learn.microsoft.com/azure/active-directory/roles/groups-assign-role#microsoft-graph-api
DIRECTORY_ROLEID=88d8e3e3-8f55-4a1e-953a-9b9898b8876b
az rest -m POST -u https://graph.microsoft.com/v1.0/roleManagement/directory/roleAssignments -b '{
    "principalId": "'$ROLEASSIGNABLEGROUP_ID'",
    "roleDefinitionId": "'$DIRECTORY_ROLEID'",
    "directoryScopeId": "/"
}'

# Create another app that the workload identity can add to the role-assignable group,
# and by doing that grant it the directory role through the group membership.
GROUPAPP_SP=$(az ad sp create-for-rbac --name "$PREFIX"App)
GROUPAPP_APPID=$(echo $GROUPAPP_SP | jq -r .appId)
GROUPAPP_SP_OBJECTID=$(az ad sp list --filter "appId eq '$GROUPAPP_APPID'" --query "[0].id" -o tsv)
GROUPAPP_SP_PASSWORD=$(echo $GROUPAPP_SP | jq -r .password)
echo "Group App Service Principal created: App ID '$GROUPAPP_APPID', Object ID '$GROUPAPP_SP_OBJECTID'."

#################### WORKLOAD IDENTITY ####################

# Use a client credentials flow to acquire a token from Azure AD for the service principal, targeting the Microsoft Graph.
WORKLOAD_AUTH=$(curl -s -X POST -d "grant_type=client_credentials&client_id=$WORKLOAD_APPID&client_secret=$WORKLOAD_SP_PASSWORD&scope=https://graph.microsoft.com/.default" https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/token)
WORKLOAD_TOKEN=$(echo $WORKLOAD_AUTH | jq -r .access_token)

# Call the Microsoft Graph API using the token and add the group app to the role-assignable group
# using the Owner permission of the group and requiring no other directory permissions.
# See https://learn.microsoft.com/graph/api/group-post-members?view=graph-rest-1.0&tabs=http.
curl -s -X POST -H "Authorization: Bearer $WORKLOAD_TOKEN" -H "Content-Type: application/json" https://graph.microsoft.com/v1.0/groups/$ROLEASSIGNABLEGROUP_ID/members/\$ref -d '{
    "@odata.id": "https://graph.microsoft.com/v1.0/serviceprincipals/'$GROUPAPP_SP_OBJECTID'"
}'

#################### GROUP APP ####################

# Use a client credentials flow to acquire a token from Azure AD for the group app, targeting the Microsoft Graph.
GROUPAPP_AUTH=$(curl -s -X POST -d "grant_type=client_credentials&client_id=$GROUPAPP_APPID&client_secret=$GROUPAPP_SP_PASSWORD&scope=https://graph.microsoft.com/.default" https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/token)
GROUPAPP_TOKEN=$(echo $GROUPAPP_AUTH | jq -r .access_token)

# For debugging purposes, show the directory roles contained in the access token as the "wids" claim.
GROUPAPP_TOKEN_PARTS=(${GROUPAPP_TOKEN//./ })
GROUPAPP_TOKEN_DIRECTORYROLES=$(echo ${GROUPAPP_TOKEN_PARTS[1]} | base64 -d | jq .wids)
echo "Directory roles: $GROUPAPP_TOKEN_DIRECTORYROLES"

# Call the Microsoft Graph API using the token and list all users using the "Directory Reader" role
# granted through the role-assignable group membership.
curl -s -X GET -H "Authorization: Bearer $GROUPAPP_TOKEN" https://graph.microsoft.com/v1.0/users

#################### WORKLOAD IDENTITY ####################

# Remove the app from the role-assignable group.
# See https://learn.microsoft.com/graph/api/group-delete-members?view=graph-rest-1.0&tabs=http.
curl -s -X DELETE -H "Authorization: Bearer $WORKLOAD_TOKEN" https://graph.microsoft.com/v1.0/groups/$ROLEASSIGNABLEGROUP_ID/members/$GROUPAPP_SP_OBJECTID/\$ref

#################### ADMINISTRATOR ####################

# Remove the group app and the role-assignable group.
az ad app delete --id $GROUPAPP_APPID
az ad group delete --group $ROLEASSIGNABLEGROUP_ID

# Remove the Workload Identity.
az ad app delete --id $WORKLOAD_APPID
