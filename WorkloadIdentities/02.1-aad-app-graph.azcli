#################### ADMINISTRATOR ####################

# Look up the object ID of the service principal representing the Microsoft Graph API in the current tenant.
GRAPH_APPID=00000003-0000-0000-c000-000000000000
GRAPH_SP_OBJECTID=$(az ad sp list --filter "appId eq '$GRAPH_APPID'" --query "[0].id" -o tsv)

# Grant the Workload Identity the "Application.ReadWrite.OwnedBy" application permission on Microsoft Graph.
# See https://learn.microsoft.com/graph/permissions-reference?view=graph-rest-1.0#all-permissions-and-ids.
# Creating an app role assignment is the same as granting admin consent for that permission.
GRAPH_APPROLEID=18a4783c-866b-4cc7-a460-3d5e5662c884
az rest -m POST -u https://graph.microsoft.com/v1.0/servicePrincipals/$WORKLOAD_SP_OBJECTID/appRoleAssignments -b '{
    "principalId": "'$WORKLOAD_SP_OBJECTID'",
    "resourceId": "'$GRAPH_SP_OBJECTID'",
    "appRoleId": "'$GRAPH_APPROLEID'"
}'

#################### WORKLOAD IDENTITY ####################

# Use a client credentials flow to acquire a token from Azure AD for the service principal, targeting the Microsoft Graph.
WORKLOAD_AUTH=$(curl -s -X POST -d "grant_type=client_credentials&client_id=$WORKLOAD_APPID&client_secret=$WORKLOAD_SP_PASSWORD&scope=https://graph.microsoft.com/.default" https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/token)
WORKLOAD_TOKEN=$(echo $WORKLOAD_AUTH | jq -r .access_token)

# For debugging purposes, show the app roles contained in the access token as the "roles" claim.
WORKLOAD_TOKEN_PARTS=(${WORKLOAD_TOKEN//./ })
WORKLOAD_TOKEN_APPROLES=$(echo ${WORKLOAD_TOKEN_PARTS[1]} | base64 -d | jq .roles)
echo "Workload Identity app roles: $WORKLOAD_TOKEN_APPROLES"

# Call the Microsoft Graph API using the token and list all apps (using the granted "Application.ReadWrite.OwnedBy" permission).
APPS=$(curl -s -X GET -H "Authorization: Bearer $WORKLOAD_TOKEN" https://graph.microsoft.com/v1.0/applications)

# Attempt to update the display name of an existing app (this should fail).
APPS_FIRST_OBJECTID=$(echo $APPS | jq -r ".value | .[0].id")
APPS_FIRST_DISPLAYNAME=$(echo $APPS | jq -r ".value | .[0].displayName")
echo "First app's display name: '$APPS_FIRST_DISPLAYNAME'"
curl -s -X PATCH -H "Authorization: Bearer $WORKLOAD_TOKEN" -H "Content-Type: application/json" https://graph.microsoft.com/v1.0/applications/$APPS_FIRST_OBJECTID -d '{
    "displayName": "'$APPS_FIRST_DISPLAYNAME'-UPDATED"
}'

# Create a new app (this should succeed).
OWNED_APP=$(curl -s -X POST -H "Authorization: Bearer $WORKLOAD_TOKEN" -H "Content-Type: application/json" https://graph.microsoft.com/v1.0/applications -d '{
    "displayName": "'$PREFIX'App"
}')
OWNED_APPID=$(echo $OWNED_APP | jq -r .appId)
OWNED_APP_OBJECTID=$(echo $OWNED_APP | jq -r .id)
echo "Owned App created: App ID '$OWNED_APPID', Object ID '$OWNED_APP_OBJECTID'."

# Modify the new app, which is "owned by" the Workload Identity (so this should succeed).
curl -s -X PATCH -H "Authorization: Bearer $WORKLOAD_TOKEN" -H "Content-Type: application/json" https://graph.microsoft.com/v1.0/applications/$OWNED_APP_OBJECTID -d '{
    "displayName": "'$PREFIX'App-UPDATED"
}'

# Remove the new app.
curl -s -X DELETE -H "Authorization: Bearer $WORKLOAD_TOKEN" https://graph.microsoft.com/v1.0/applications/$OWNED_APP_OBJECTID

#################### ADMINISTRATOR ####################

# Remove the Workload Identity.
az ad app delete --id $WORKLOAD_APPID
